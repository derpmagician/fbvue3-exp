import{H as x,r as f,z as h,A as d,y,I as g,J as i,K as w,L as u,M as p,N as U,O as D,E as S,P as m}from"./index-b3cf4afc.js";const R=x("colUrls",()=>{let a=f([]),n=f(!1);return{documents:a,loadingDoc:n,getColUrls:async()=>{n.value=!0;try{const o=h(d,"colUrls"),e=y(o,g("users","array-contains",i.currentUser.uid));(await w(e)).forEach(s=>{a.value.push({id:s.id,...s.data()})})}catch(o){console.log(o)}finally{n.value=!1}},leerColUrl:async o=>{n.value=!0;try{const e=u(d,"colUrls",o),r=await p(e);if(!r.exists())throw new Error("doc no existe");return r.data().longUrl}catch(e){console.log(e.message)}finally{n.value=!1}},addColUrl:async o=>{try{const e=h(d,"colUrls"),r=y(e,g("longUrl","==",o)),s=await w(r);if(s.empty){const c={longUrl:o,users:[i.currentUser.uid]},t=await S(e,c),l=t.id;await U(t,{shortUrl:l}),a.value.push({id:l,...c,shortUrl:l})}else{const c=u(d,"colUrls",s.docs[0].id);await U(c,{users:D(i.currentUser.uid)});const t={id:s.docs[0].id,...s.docs[0].data(),users:[...s.docs[0].data().users,i.currentUser.uid]},l=a.value.findIndex(v=>v.id===t.id);l!==-1?a.value[l]=t:a.value.push(t)}}catch(e){console.log(e)}},deleteColUrl:async o=>{try{const e=u(d,"colUrls",o),r=await p(e);if(!r.exists())throw new Error("Document does not exist");const s=r.data().users,c=s.indexOf(i.currentUser.uid);if(c===-1)throw new Error("User is not in the document");s.splice(c,1),s.length===0?await m(e):await U(e,{users:s});const t=a.value.findIndex(l=>l.id===o);t!==-1&&(s.length===0?a.value.splice(t,1):a.value[t]={id:o,...r.data(),users:s})}catch(e){console.log(e.message)}}}});export{R as u};
